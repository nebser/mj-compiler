package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

terminal PROGRAM, CONST, COMMA, CLASS, EXTENDS, ABSTRACT, ASSIGN;
terminal String IDENT, CHARACTER, BOOL;
terminal Integer NUMBER;
terminal SEMI_COLON, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal LPARENTHESIS, RPARENTHESIS, VOID;
terminal IF, ELSE, FOR, BREAK, CONTINUE, RETURN, READ, PRINT;
terminal INCREMENT, DECREMENT, OR, AND;
terminal MINUS, PLUS, MULTIPLY, DIVIDE, MOD;
terminal NEW, COLON;
terminal EQUALS, DIFFERS, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL;

nonterminal DeclSection, DeclList, DeclElem, MethodDeclSection, MethodDecl;
nonterminal VarDecl, AbstractClassDecl, ClassDecl;
nonterminal ConstList, Const, ConstDefinition;
nonterminal VarDeclSection, VarDeclList, VarList, Var;
nonterminal Program, Type;
nonterminal StatementList, Statement, AnyMethodDeclSection, AnyMethodDeclList, AnyMethodDecl;
nonterminal ReturnType, FormPars, AbstractMethodDecl, MethodDeclList, ExtendsStmt;
nonterminal DesignatorStatement, Condition, Matched, Unmatched, OptionalDesignatorStatement, ForStatement;
nonterminal ReturnExpr, Expr, Designator, Assignop, ActPars, ExprList, Relop;
nonterminal CondTerm, CondFact, AddExprPart, Addop, Term;
nonterminal Factor, FactorList, Mulop;
nonterminal DesignatorSuffix, FormParsList;

Program ::= (Program) PROGRAM IDENT DeclSection LBRACE MethodDeclList RBRACE;

DeclSection ::= (DeclarationSection) DeclList
				|
				(NoDeclarationSection) /* epsilon */
				;

DeclList ::= (Declarations) DeclList DeclElem
			|
			(Declaration) DeclElem
			;
			
DeclElem ::= (ConstantDeclarations) CONST Type ConstList
			|
			(GlobalVariableDeclarations) VarDecl
			|
			(GlobalAbstactClassDeclarations) AbstractClassDecl
			|
			(GlobalClassDeclarations) ClassDecl
			;

ConstList ::= (Constants) ConstDefinition COMMA ConstList
			|
			 (Constant) ConstDefinition SEMI_COLON
			;
			
ConstDefinition ::= (ConstDefinition) IDENT ASSIGN Const;

Const ::= (NumberConstant) NUMBER
					|
					(CharacterConstant) CHARACTER
					|
					(BoolConstant) BOOL
					;

VarDecl ::= (VarDecl) Type VarList SEMI_COLON;

VarList ::= (Variables) VarList COMMA Var
			|
			(Variable) Var
			;
			
Var ::= (PrimitiveVar) IDENT
		|
		(ArrayVar) IDENT LBRACKET RBRACKET
		;

MethodDeclSection ::= (MethodDeclarationSection) LBRACE MethodDeclList RBRACE
					|
					(NoMethodDeclarationSection) /* epsilon */
					;
					
MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(MethodDeclaration) MethodDecl
					;
					
ClassDecl ::= (ClassDecl) CLASS IDENT ExtendsStmt LBRACE VarDeclSection MethodDeclSection RBRACE;

ExtendsStmt ::= (ExtendsStatement) EXTENDS IDENT
					| 
					(NoExtendsStatement) /* epsilon */
					;

VarDeclSection ::= (VariableDeclarationSection) VarDeclList
					|
					(NoVariableDeclarationSection) /* epsilon */
					;
					
VarDeclList ::= (VariablesDeclarations) VarDeclList VarDecl
				|
				(VariablesDeclarationsElem) Type VarList SEMI_COLON
				;
				
AbstractClassDecl ::= (AbstractClassDecl) ABSTRACT CLASS IDENT ExtendsStmt LBRACE VarDeclSection AnyMethodDeclSection RBRACE;

AnyMethodDeclSection ::= (AnyMethodDeclarationSection) LBRACE AnyMethodDeclList RBRACE
						|
						(NoAnyMethodDeclarationSection) /* epsilon */
						;
						
AnyMethodDeclList ::= (AnyMethodDeclarations) AnyMethodDeclList AnyMethodDecl
						|
						(AnyMethodDeclaration) AnyMethodDecl
						;
						
AnyMethodDecl ::= (RealMethodDeclaration) MethodDecl
				|
				(AbstractMethodDeclaration) ABSTRACT ReturnType IDENT LPARENTHESIS FormPars RPARENTHESIS SEMI_COLON
				;
					
MethodDecl ::= (MethodDecl) ReturnType IDENT LPARENTHESIS FormPars RPARENTHESIS VarDeclSection LBRACE StatementList RBRACE;

ReturnType ::= (NonVoidType) Type
				|
				(VoidType) VOID
				;
				
FormPars ::= (FormalParameters) FormParsList
			|
			(NoFormalParameters) /* epsilon */
			;
			
FormParsList ::= (ParameterList) FormParsList COMMA Type Var
				 |
				 (SinglePar) Type Var
				 ;
			
StatementList ::= (Statements) StatementList Statement
					|
					(SingleStatement) Statement
					;
					
Statement ::= (MathedStmt) Matched
				|
			  (UnmatchedStmt) Unmatched
			  |
			  (ForStmt) FOR LPARENTHESIS OptionalDesignatorStatement SEMI_COLON Condition SEMI_COLON OptionalDesignatorStatement RPARENTHESIS Statement
			  ;
			  
Matched ::= (DesignatorStmt) DesignatorStatement SEMI_COLON
			|
			(MatchedIf) IF LPARENTHESIS Condition RPARENTHESIS Matched ELSE Matched
			|
			(StmtList) LBRACE StatementList RBRACE
			|
			(Break) BREAK SEMI_COLON
			|
			(Continue) CONTINUE SEMI_COLON
			|
			(Return) RETURN ReturnExpr SEMI_COLON
			|
			(Read) READ LPARENTHESIS Designator RPARENTHESIS SEMI_COLON
			|
			(Print) PRINT LPARENTHESIS Expr RPARENTHESIS SEMI_COLON
			|
			(PrintWithNumber) PRINT LPARENTHESIS Expr COMMA NUMBER RPARENTHESIS SEMI_COLON
			;
			
ReturnExpr ::= (RetExpr) Expr
				|
				(NoReturnExpr) /* epsilon */
				;
			
Unmatched ::= (UnmatchedIf) IF LPARENTHESIS Condition RPARENTHESIS Statement
				|
			  (UnmatchedElse) IF LPARENTHESIS Condition RPARENTHESIS Matched ELSE Unmatched
			  ;
			  
OptionalDesignatorStatement ::= (OptionalDesignatorStmt) DesignatorStatement
								|
								(NoDesignatorStmt) /* epsilon */
								;
								
DesignatorStatement ::= (AssignDesignator) Designator Assignop Expr
						|
						(FunctionCall) Designator LPARENTHESIS ActPars RPARENTHESIS
						|
						(IncrementDesignator) Designator INCREMENT
						|
						(DecrementDesignator) Designator DECREMENT
						;
						
ActPars ::= (ActualPars) ExprList
			|
			(NoActualPars) /* epsilon */
			;
			
ExprList ::= (ExpressionList) ExprList COMMA Expr
			|
			 (Expression) Expr
			 ;
			 
Condition ::= (CondTermList) Condition OR CondTerm
				|
				(SingleCondTerm) CondTerm
				;
				
CondTerm ::= (CondFactList) CondTerm AND CondFact
			|
			(SingleCondFact) CondFact
			; 
			
CondFact ::= (ExprOp) Expr Relop Expr
			|
			(SingleExpr) Expr
			;
			
Expr ::= (UnaryMinusExpression) MINUS Term AddExprPart
		|
		(NoMinusExpression) Term AddExprPart
		;
		
AddExprPart ::= (AddExpressionList) AddExprPart Addop Term
				|
				(NoAddExpression) /* epsilon */
				;
				
Addop ::= (Minus) MINUS
			|
		  (Plus) PLUS
		  ;
		  
Term ::= (Term) Factor FactorList;

FactorList ::= (Factors) FactorList Mulop Factor
				|
			   (NoFactorList) /* epsilon */
			   ;
		
Mulop ::= (Multiply) MULTIPLY
			|
		  (Divide) DIVIDE
		  	|
		  (Mod) MOD
		  ;
		  
Factor ::= (DesignatorFactor) Designator
			|
			(DisnatorWithActParsFactor) Designator LPARENTHESIS ActPars RPARENTHESIS
			|
			(ConstFactor) Const
			|
			(NewArrayFactor) NEW Type LBRACKET Expr RBRACKET
			|
			(NewObjectFactor) NEW Type
			|
			(ExpressionFactor) LPARENTHESIS Expr RPARENTHESIS
			;
			
Designator ::= (Designator) IDENT DesignatorSuffix;

DesignatorSuffix ::= (ObjectDesignatorSuffix) DesignatorSuffix COLON IDENT
					|
					(ArrayDesignatorSuffix) DesignatorSuffix LBRACKET Expr RBRACKET
					|
					(NoDesignatorSuffix) /* epsilon */
					;

Relop ::= (Equals) EQUALS
		  |
		  (Differs) DIFFERS
		  |
		  (Greater) GREATER
		  |
		  (GreaterOrEqual) GREATER_OR_EQUAL
		  |
		  (Less) LESS
		  |
		  (LessOrEqual) LESS_OR_EQUAL
		  ;				
						
Assignop ::= ASSIGN;
				
Type ::= (Type) IDENT;